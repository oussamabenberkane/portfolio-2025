/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Inditrion Dradnon (https://sketchfab.com/dradnon)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/laptop-holoscreen-f579a2912f8f4493a34fa0fe56abd247
Title: Laptop Holoscreen
*/

import { useEffect, useRef, Suspense } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { useMotionValue, useSpring } from 'motion/react';
import * as THREE from 'three';

// Placeholder component that renders a simple laptop shape
function LaptopPlaceholder(props) {
    const group = useRef();

    const yPosition = useMotionValue(5);
    const ySpring = useSpring(yPosition, { damping: 30 });

    useEffect(() => {
        ySpring.set(-1);
    }, [ySpring]);

    useFrame(() => {
        if (group.current) {
            group.current.position.y = ySpring.get();
        }
    })

    return (
        <group ref={group} {...props}
            rotation={props.rotation || [-Math.PI / 2, -0.2, 2.2]}
            scale={props.scale || 0.3}
            position={props.position || [1.3, -1, 0]}>
            {/* Simple laptop base */}
            <mesh position={[0, 0, 0]}>
                <boxGeometry args={[3, 0.2, 2]} />
                <meshStandardMaterial color="#333333" />
            </mesh>
            {/* Laptop screen */}
            <mesh position={[0, 1, -1]} rotation={[-0.3, 0, 0]}>
                <boxGeometry args={[2.8, 2, 0.1]} />
                <meshStandardMaterial color="#111111" />
            </mesh>
            {/* Screen glow */}
            <mesh position={[0, 1, -0.95]} rotation={[-0.3, 0, 0]}>
                <planeGeometry args={[2.6, 1.8]} />
                <meshBasicMaterial color="#00ffff" opacity={0.3} transparent />
            </mesh>
        </group>
    )
}

export function Laptop(props) {
    const group = useRef();

    // Try to load the GLTF, but fall back to placeholder if it fails
    try {
        const { nodes, materials, animations } = useGLTF('/laptop_holoscreen.glb');
        const { actions } = useAnimations(animations, group);

        useEffect(() => {
            if (animations && animations.length > 0) {
                actions[animations[0].name]?.play();
            }
        }, [actions, animations]);

        const yPosition = useMotionValue(5);
        const ySpring = useSpring(yPosition, { damping: 30 });

        useEffect(() => {
            ySpring.set(-1);
        }, [ySpring]);

        useFrame(() => {
            if (group.current) {
                group.current.position.y = ySpring.get();
            }
        })

        return (
            <group ref={group} {...props} dispose={null}
                rotation={props.rotation || [-Math.PI / 2, -0.2, 2.2]}
                scale={props.scale || 0.3}
                position={props.position || [1.3, -1, 0]}>
                <group>
                    <group>
                        <group
                            position={[1.936, 11.589, -16.73]}
                            rotation={[-Math.PI / 2, 0, 0]}
                            scale={[0.137, 0.129, 0.127]}>
                            <mesh
                                castShadow
                                receiveShadow
                                geometry={nodes.MaterialFBXASC032FBXASC0352142150880.geometry}
                                material={materials.MaterialFBXASC032FBXASC0352142150880}
                            />
                            <mesh
                                castShadow
                                receiveShadow
                                geometry={nodes.MaterialFBXASC032FBXASC0352142171859.geometry}
                                material={materials.MaterialFBXASC032FBXASC0352142171859}
                            />
                        </group>
                        <mesh
                            castShadow
                            receiveShadow
                            geometry={nodes.MaterialFBXASC032FBXASC0352142172393.geometry}
                            material={materials.MaterialFBXASC032FBXASC0352142172393}
                            position={[1.936, 11.653, -18.202]}
                            rotation={[-0.262, 0, 0]}
                            scale={0.28}
                        />
                    </group>
                </group>
            </group>
        )
    } catch (error) {
        console.warn('Failed to load laptop model, using placeholder:', error);
        return <LaptopPlaceholder {...props} />;
    }
}

// Wrap the component with Suspense and error boundary
export default function LaptopWithFallback(props) {
    return (
        <Suspense fallback={<LaptopPlaceholder {...props} />}>
            <Laptop {...props} />
        </Suspense>
    )
}

// Comment out the preload to prevent the error
// useGLTF.preload('/laptop_holoscreen.glb')

export default Laptop